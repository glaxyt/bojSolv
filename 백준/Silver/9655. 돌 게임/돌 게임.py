## 12시 57분 시작
## 완벽하게 게임한다는 것의 의미
## 내가 상근이의 입장이라면 5가 주어졌을 때 어떻게해야하는가?
## 나는 3 혹은 1만큼 가져갈 수 있다.
## 3을 가져간다면 2가 남는다. -> 창영이는 3을 가져가고 싶지만, 남은 것이 1개이기에 1개만 가져갈 수 있다. 따라서 내가 이긴다.
## 1을 가져간다면 4가 남는다 -> 창영이는 3을 가져가거나 1을 가져갈 것이다. 어떤 것을 가져가더라도, 내가 이길 수 있다.
## 그렇다면 처음에는 어떤 방법을 가져가는 것이 완벽한 방법일까?

## 8이 주어졌다고 생각해보자
## 그렇다면 나는 3을 가져간다고 해보자. -> 5가 남는다. 창영이는 5가 남았으니, 3을 가져가서 이기려할 것이다.
## 나는 1을 가져간다. -> 창영이는 7이기에 1이나 3을 가져간다. ->
## 불확실성만 남아있다. 이건 어떤 것을 정할 수는 없지만, 어느 지점에서 누구의 턴에서 어떤 방법을 내세울지는 알 수 있다. 59분 화장실

## 결국에는 어느 상근이가 이길 수 밖에 없던 이유를 찾아야한다.
## 1이라면 상근 승
## 2라면 무조건 창영 승
## 3이라면 무조건 상근 승
## 4라면 무조건 창영 승 (N-1, N-3 상태에서의 승부가 상근이의 승리로 끝나있다면)
## 5라면 3을 하면 2, 1을 가져가면 4가 남는다. 승패를 가를 수 있는 결정권은 무조건 상근이에게 있다.
## 5가 분기점이다. 5를 넘어서면 완벽하게 플레이를 해야, 서로의 승부가 날 수 있다.
## 6이라면 3을 하면 3, 1을 하면 5가 되기에 창영이가 승부를 가를 수 있다.
## 그렇다는 얘기는 누가 직전 1,2,3에 접근하냐에 따라 승부가 갈린다.
N = int(input())
dp = [False] * (N + 1)

if N >= 1:
    dp[1] = True
if N >= 2:
    dp[2] = False
if N >= 3:
    dp[3] = True

for i in range(4, N + 1):
    dp[i] = not (dp[i - 1] and dp[i - 3])

print("SK" if dp[N] else "CY")

